### GIT Repo ###
# gitfs changeset
regex/^\[git\]
	Open=%cd %p/changesetfs://
	View=%cd %p/patchsetfs://

### Archives ###
# .tgz, .tpz, .tar.gz, .tar.z, .tar.Z, .ipk
regex/\.t([gp]?z|ar\.g?[zZ])$|\.ipk|\.gem$
	Open=%cd %p/utar://
	View=%view{ascii} gzip -dc %f 2>/dev/null | tar tvvf -

regex/\.tar\.bz$
	# Open=%cd %p/utar://
	View=%view{ascii} bzip -dc %f 2>/dev/null | tar tvvf -

regex/\.t(ar\.bz2|bz2?|b2)$
	Open=%cd %p/utar://
	View=%view{ascii} bzip2 -dc %f 2>/dev/null | tar tvvf -

# .tar.lzma, .tlz
regex/\.t(ar\.lzma|lz)$
	Open=%cd %p/utar://
	View=%view{ascii} lzma -dc %f 2>/dev/null | tar tvvf -

# .tar.xz, .txz
regex/\.t(ar\.xz|xz)$
	Open=%cd %p/utar://
	View=%view{ascii} xz -dc %f 2>/dev/null | tar tvvf -

# .tar.F - used in QNX
regex/\.tar\.F$
	# Open=%cd %p/utar://
	View=%view{ascii} freeze -dc %f 2>/dev/null | tar tvvf -

# .qpr/.qpk - QNX Neutrino package installer files
regex/\.(qp[rk])$
	Open=%cd %p/utar://
	View=%view{ascii} gzip -dc %f 2>/dev/null | tar tvvf -

# tar
regex/\.(tar|TAR)$
	Open=%cd %p/utar://
	View=%view{ascii} tar tvvf - < %f

# lha
type/^LHa\ .*archive
	Open=%cd %p/ulha://
	View=%view{ascii} lha l %f

# arj
regex/\.a(rj|[0-9][0-9])$
	Open=%cd %p/uarj://
	View=%view{ascii} unarj l %f

# cab
regex/\.([cC][aA][bB])$
	Open=%cd %p/ucab://
	View=%view{ascii} cabextract -l %f

# ha
regex/\.([Hh][Aa])$
	Open=%cd %p/uha://
	View=%view{ascii} ha lf %f

# rar
regex/\.[rR]([aA][rR]|[0-9][0-9])$
	Open=%cd %p/urar://
	View=%view{ascii} rar v -c- %f

# ALZip
regex/\.(alz|ALZ)$
	Open=%cd %p/ualz://
	View=%view{ascii} unalz -l %f

# cpio
shell/.cpio.Z
	Open=%cd %p/ucpio://
	View=%view{ascii} gzip -dc %f | cpio -itv 2>/dev/null

shell/.cpio.xz
	Open=%cd %p/ucpio://
	View=%view{ascii} xz -dc %f | cpio -itv 2>/dev/null

shell/.cpio.gz
	Open=%cd %p/ucpio://
	View=%view{ascii} gzip -dc %f | cpio -itv 2>/dev/null

shell/.cpio
	Open=%cd %p/ucpio://
	View=%view{ascii} cpio -itv < %f 2>/dev/null

# ls-lR
regex/(^|\.)ls-?lR(\.gz|Z|bz2)$
	Open=%cd %p/lslR://

# patch
regex/\.(diff|patch)(\.bz2)$
	Open=%cd %p/patchfs://
	View=%view{ascii} bzip2 -dc %f 2>/dev/null

regex/\.(diff|patch)(\.(gz|Z))$
	Open=%cd %p/patchfs://
	View=%view{ascii} gzip -dc %f 2>/dev/null

regex/\.(diff|patch)$
	Open=%cd %p/patchfs://
	View=%view{ascii} /bin/cat %f 2>/dev/null

# ar library
regex/\.s?a$
	Open=%cd %p/uar://
	#Open=%view{ascii} ar tv %f
	View=%view{ascii} file %f && nm -C %f

# trpm
regex/\.trpm$
	Open=%cd %p/trpm://
	View=%view{ascii} rpm -qivl --scripts `basename %p .trpm`

# RPM packages (SuSE uses *.spm for source packages)
regex/\.(src\.rpm|spm)$
	Open=%cd %p/rpm://
	View=%view{ascii} if rpm --nosignature --version >/dev/null 2>&1; then RPM="rpm --nosignature" ; else RPM="rpm" ; fi ; $RPM -qivlp --scripts %f

regex/\.rpm$
	Open=%cd %p/rpm://
	View=%view{ascii} if rpm --nosignature --version >/dev/null 2>&1; then RPM="rpm --nosignature" ; else RPM="rpm" ; fi ; $RPM -qivlp --scripts %f

# deb
regex/\.u?deb$
	Open=%cd %p/deb://
	View=%view{ascii} dpkg-deb -I %f && echo && dpkg-deb -c %f

# dpkg
shell/.debd
        Open=%cd %p/debd://
        View=%view{ascii} dpkg -s `echo %p | sed 's/\([0-9a-z.-]*\).*/\1/'`
# apt
shell/.deba
        Open=%cd %p/deba://
        View=%view{ascii} apt-cache show `echo %p | sed 's/\([0-9a-z.-]*\).*/\1/'`

# ISO9660
regex/\.([iI][sS][oO])$
	Open=%cd %p/iso9660://
	View=%view{ascii} isoinfo -l -i %f

# 7zip archives (they are not man pages)
regex/\.(7z|7Z)$
	Open=%cd %p/u7z://
	View=%view{ascii} 7za l %f 2>/dev/null


### Documentation ###
# Texinfo
#regex/\.(te?xi|texinfo)$

# GNU Info page
type/^Info\ text
	Open=info -f %f

shell/.info
	Open=info -f %f

# Exception: .3gp are video files not manual pages
regex/\.(3[gG][pP])$
	Include=video

# Manual page
regex/(([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])|\.man)$
	Open=case %d/%f in */log/*|*/logs/*) cat %f ;; *) { zsoelim %f 2>/dev/null || cat %f; } | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) cat %f ;; *) { zsoelim %f 2>/dev/null || cat %f; } | nroff -c -Tlatin1 -mandoc ;; esac

# Perl pod page
shell/.pod
	Open=pod2man %f | nroff -c -Tlatin1 -mandoc | %var{PAGER:more}
	View=%view{ascii,nroff} pod2man %f | nroff -c -Tlatin1 -mandoc

# Troff with me macros.
# Exception - "read.me" is not a nroff file.
shell/read.me
	Open=
	View=

shell/.me
	Open=nroff -c -Tlatin1 -me %f | %var{PAGER:more}
	View=%view{ascii,nroff} nroff -c -Tlatin1 -me %f

# Troff with ms macros.
shell/.ms
	Open=nroff -c -Tlatin1 -ms %f | %var{PAGER:more}
	View=%view{ascii,nroff} nroff -c -Tlatin1 -ms %f

# Manual page - compressed
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.g?[Zz]$
	Open=case %d/%f in */log/*|*/logs/*) gzip -dc %f ;; *) gzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) gzip -dc %f ;; *) gzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz$
	Open=case %d/%f in */log/*|*/logs/*) bzip -dc %f ;; *) bzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) bzip -dc %f ;; *) bzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz2$
	Open=case %d/%f in */log/*|*/logs/*) bzip2 -dc %f ;; *) bzip2 -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) bzip2 -dc %f ;; *) bzip2 -dc %f | nroff -c -Tlatin1 -mandoc ;; esac

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lzma$
	Open=case %d/%f in */log/*|*/logs/*) lzma -dc %f ;; *) lzma -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) lzma -dc %f ;; *) lzma -dc %f | nroff -c -Tlatin1 -mandoc ;; esac

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.xz$
	Open=case %d/%f in */log/*|*/logs/*) xz -dc %f ;; *) xz -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) xz -dc %f ;; *) xz -dc %f | nroff -c -Tlatin1 -mandoc ;; esac

### Images ###
type/^GIF
	Include=image

type/^JPEG
	View=%view{ascii} identify %f; test -x /usr/bin/exif && echo && exif %f 2>/dev/null
	Include=image

type/^PC\ bitmap
	Include=image

type/^PNG
	Include=image

type/^TIFF
	Include=image

type/^PBM
	Include=image

type/^PGM
	Include=image

type/^PPM
	Include=image

type/^Netpbm
	Include=image

shell/.xcf
	Open=(gimp %f &)

shell/.xbm
	Open=bitmap %f

shell/.xpm
	Include=image
	View=sxpm %f

shell/.ico
	Include=image

include/image
	Open=(gpicview %f &)
	View=%view{ascii} identify %f


### Media files ###
# audio
regex/\.([wW][aA][vV]|[sS][nN][dD]|[vV][oO][cC]|[aA][uU]|[sS][mM][pP]|[aA][iI][fF][fF]|[sS][nN][dD])$
  Include=media

regex/\.([mM][oO][dD]|[sS]3[mM]|[xX][mM]|[iI][tT]|[mM][tT][mM]|669|[sS][tT][mM]|[uU][lL][tT]|[fF][aA][rR])$
  Include=media

regex/\.([wW][aA][wW]22)$
  Include=media

regex/\.([mM][pP]3)$
  Include=media

regex/\.([oO][gG][gG|aA|vV|xX])$
  Include=media

regex/\.([sS][pP][xX]|[fF][lL][aA][cC])$
  Include=media

regex/\.([mM][iI][dD][iI]?|[rR][mM][iI][dD]?)$
  Include=media

regex/\.([wW][mM][aA])$
  Include=media

regex/\.([mM]3[uU]|[pP][lL][sS])$
  Include=media

# video
regex/\.([aA][vV][iI])$
	Include=media

regex/\.([aA][sS][fFxX])$
	Include=media

regex/\.([dD][iI][vV][xX])$
	Include=media

regex/\.([mM][kK][vV])$
	Include=media

regex/\.([mM][oO][vV]|[qQ][tT])$
	Include=media

regex/\.([mM][pP]4|[mM]4[vV]|[mM][pP][eE]?[gG])$
	Include=media

# MPEG-2 TS container + H.264 codec
regex/\.([mM][tT][sS])$
	Include=media

regex/\.([tT][sS])$
	Include=media

regex/\.([vV][oO][bB])$
	Include=media

regex/\.([wW][mM][vV])$
	Include=media

regex/\.([fF][lL][iIcCvV])$
	Include=media

regex/\.([oO][gG][mM])$
	Include=media

include/media
	Open=(mpv %f)


### Documents ###

# Postscript
type/^PostScript
	Open=(gv %f &)
	View=%view{ascii} ps2ascii %f

# PDF
type/^PDF
	Open=(see %f &)
	#Open=(acroread %f &)
	#Open=(ghostview %f &)
	View=%view{ascii} pdftotext %f -

# The following code very ugly and should not be taken as example.
# It should be cleaned up when the new format of mc.ext is developed.

# html
regex/\.([hH][tT][mM][lL]?)$
	Open=(if test -n "" && test -n "$DISPLAY"; then ( file://%d/%p &) 1>&2; else links %f || lynx -force_html %f || ${PAGER:-more} %f; fi) 2>/dev/null
	View=%view{ascii} links -dump %f 2>/dev/null || w3m -dump %f 2>/dev/null || lynx -dump -force_html %f

# StarOffice 5.2
shell/.sdw
	Open=(libreoffice %f &)

# StarOffice 6 and OpenOffice.org formats
regex/\.(odt|ott|sxw|stw|ods|ots|sxc|stc|odp|otp|sxi|sti|odg|otg|sxd|std|odb|odf|sxm|odm|sxg)$
	Open=(libreoffice %f &)
	View=%view{ascii} odt2txt %f

# AbiWord
shell/.abw
	Open=(abiword %f &)

# Microsoft Word Document
regex/\.([Dd][oO][cCtT]|[Ww][rR][iI])$
	Open=(abiword %f >/dev/null 2>&1 &)
	View=%view{ascii} antiword -t %f || catdoc -w %f || word2x -f text %f - || strings %f
type/^Microsoft\ Word
	Open=(abiword %f >/dev/null 2>&1 &)
	View=%view{ascii} antiword -t %f || catdoc -w %f || word2x -f text %f - || strings %f

# RTF document
regex/\.([rR][tT][fF])$
	Open=(abiword %f >/dev/null 2>&1 &)

# Microsoft Excel Worksheet
regex/\.([xX][lL][sSwW])$
	Open=(gnumeric %f >/dev/null 2>&1 &)
	View=%view{ascii} xls2csv %f || strings %f
type/^Microsoft\ Excel
	Open=(gnumeric %f >/dev/null 2>&1 &)
	View=%view{ascii} xls2csv %f || strings %f

# Use OpenOffice.org to open any MS Office documents
type/^Microsoft\ Office\ Document
	Open=(libreoffice %f &)

# Framemaker
type/^FrameMaker
	Open=fmclient -f %f

# DVI
regex/\.([dD][vV][iI])$
	Open=run-mailcap %f 2>&1 &
	View=%view{ascii} catdvi %f

# TeX
regex/\.([Tt][Ee][Xx])$
	Include=editor

# DjVu
regex/\.(djvu?|DJVU?)$
	Open=djview %f &
	View=%view{ascii} djvused -e print-pure-txt %f

### Miscellaneous ###

# Makefile
regex/[Mm]akefile$
	Open=make -f %f %{Enter parameters}

# Imakefile
shell/Imakefile
	Open=xmkmf -a

# Makefile.PL (MakeMaker)
regex/^Makefile.(PL|pl)$
	Open=%var{PERL:perl} %f

# dbf
regex/\.([dD][bB][fF])$
       Open=%view{ascii} dbview %f
       View=%view{ascii} dbview -b %f

# REXX script
regex/\.(rexx?|cmd)$
       Open=rexx %f %{Enter parameters};echo "Press ENTER";read y

# Disk images for Commodore computers (VIC20, C64, C128)
regex/\.(d64|D64)$
	Open=%cd %p/uc1541://
	View=%view{ascii} c1541 %f -list
	Extract=c1541 %f -extract

# Glade, a user interface designer for GTK+ and GNOME
regex/\.([Gg][Ll][Aa][Dd][Ee])$
	Open=if glade-3 --version >/dev/null 2>&1; then (glade-3 %f >/dev/null 2>&1 &); else (glade-2 %f >/dev/null 2>&1 &); fi

# Gettext Catalogs
shell/.mo
	View=%view{ascii} msgunfmt %f || cat %f

# lyx
regex/\.(lyx|LYX)$
	Open=lyx %f
	View=%view{ascii} lyxcat %f

# torrent
regex/\.([tT][oO][rR][rR][eE][nN][tT])$
	View=%view{ascii} ctorrent -x %f 2>/dev/null

### Plain compressed files ###

# ace
regex/\.(ace|ACE)$
	Open=%cd %p/uace://
	View=%view{ascii} unace l %f
	Extract=unace x %f

# arc
regex/\.(arc|ARC)$
	Open=%cd %p/uarc://
	View=%view{ascii} arc l %f
	Extract=arc x %f '*'
	Extract (with flags)=I=%{Enter any Arc flags:}; if test -n "$I"; then arc x $I %f; fi

# zip
type/^([Zz][Ii][Pp])\ archive
	Open=%cd %p/uzip://
	View=%view{ascii} unzip -v %f

# zoo
regex/\.([Zz][Oo][Oo])$
	Open=%cd %p/uzoo://
	View=%view{ascii} zoo l %f

# gzip
type/^gzip
	Open=gzip -dc %f | %var{PAGER:more}
	View=%view{ascii} gzip -dc %f 2>/dev/null

regex/\.(gz|Z)$
	View=%view{ascii} gzip -dc %f 2>/dev/null

# bzip2
type/^bzip2
	Open=bzip2 -dc %f | %var{PAGER:more}
	View=%view{ascii} bzip2 -dc %f 2>/dev/null

regex/\.bz2?$
	View=%view{ascii} bzip2 -dc %f 2>/dev/null

# bzip
type/^bzip
	Open=bzip -dc %f | %var{PAGER:more}
	View=%view{ascii} bzip -dc %f 2>/dev/null

# compress
type/^compress
	Open=gzip -dc %f | %var{PAGER:more}
	View=%view{ascii} gzip -dc %f 2>/dev/null

# lzma
regex/\.lzma$
	Open=lzma -dc %f | %var{PAGER:more}
	View=%view{ascii} lzma -dc %f 2>/dev/null

# xz
regex/\.xz$
	Open=xz -dc %f | %var{PAGER:more}
	View=%view{ascii} xz -dc %f 2>/dev/null

### Default ###

# Default target for anything not described above
default/*
	Open=
	View=


### EOF ###
